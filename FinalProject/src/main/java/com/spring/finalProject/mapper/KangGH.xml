<?xml version="1.0" encoding="UTF-8"?>

<!-- === mapper 기본 설정 === -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- === 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체 내에서 유일해야 한다.) === -->
<mapper namespace="KangGH">
	
	<!-- === 직원 목록 가져오기(select) 메서드 === -->
	<resultMap type="HashMap" id="empListMap">
		<result property="employeeid"		column="employeeid" 		javaType="String" />
		<result property="fk_departno"		column="fk_departno" 		javaType="String" />
		<result property="departmentname"	column="departmentname" 	javaType="String" />
		<result property="fk_positionno"	column="fk_positionno" 		javaType="String" />
		<result property="positionname"		column="positionname" 		javaType="String" />
		<result property="name"		 		column="name" 				javaType="String" />
		<result property="mobile"		 	column="mobile" 			javaType="String" />
		<result property="email"		 	column="email" 				javaType="String" />
	</resultMap>
	<select id="getEmpList" resultMap="empListMap">
		select employeeid, fk_departno, departmentname, 
			   fk_positionno, positionname, name, mobile, email
		from 
		(
		    select employeeid, fk_departno, departmentname, fk_positionno, 
		    	   name, mobile, email, retire
		    from tbl_employee E
		    JOIN tbl_department D
		    ON E.fk_departno = D.departno
		) V
		JOIN tbl_position P
		ON V.fk_positionno = P.positionno
		where V.retire = 0
		order by fk_positionNo, fk_departno, employeeID asc
	</select>
	
	<!-- 총 게시물 건수(totalCount) -->
	<select id="getTotalCount" parameterType="HashMap" resultType="int">
		select count(*)
		from tbl_employee E
		JOIN tbl_department D
		ON E.fk_departno = D.departno
		JOIN tbl_position P
		ON E.fk_positionno = P.positionno
		where retire = 0
		<if test='department != ""'>
			and D.departmentname = #{department}
		</if>
		<if test='position != ""'>
			and P.positionname = #{position}
		</if>
		<if test='searchEmp != ""'>
			and name like '%'||#{searchEmp}||'%'
		</if>
		
	</select>
	
	<!-- === 페이징 처리한 직원 목록 가져오기(검색이 있든지, 검색이 없든지 다 포함된 것) === -->
	<resultMap type="HashMap" id="empPagingListMap">
		<result property="employeeid"		column="employeeid" 		javaType="String" />
		<result property="fk_departno"		column="fk_departno" 		javaType="String" />
		<result property="departmentname"	column="departmentname" 	javaType="String" />
		<result property="fk_positionno"	column="fk_positionno" 		javaType="String" />
		<result property="positionname"		column="positionname" 		javaType="String" />
		<result property="name"		 		column="name" 				javaType="String" />
		<result property="mobile"		 	column="mobile" 			javaType="String" />
		<result property="email"		 	column="email" 				javaType="String" />
	</resultMap>
	<select id="getEmpListWithPaging" parameterType="HashMap" resultMap="empPagingListMap">
		select employeeid, fk_departno, departmentname, 
			   fk_positionno, positionname, name, mobile, email
		from
		(
		    select row_number() over(order by fk_positionNo, fk_departno, employeeID) AS RNO,
		           employeeid, fk_departno, departmentname, 
		           fk_positionno, positionname, name, mobile, email
		    from 
		    (
		        select employeeid, fk_departno, departmentname, fk_positionno, 
		               name, mobile, email, retire
		        from tbl_employee E
		        JOIN tbl_department D
		        ON E.fk_departno = D.departno
		    ) V
		    JOIN tbl_position P
		    ON V.fk_positionno = P.positionno
		    where V.retire = 0
		    <if test='department != ""'>
		    	and departmentname = #{department}
		    </if>
		    <if test='position != ""'>
		    	and positionname = #{position}
		    </if>
		    <if test='searchEmp != ""'>
		    	and name like '%'|| #{searchEmp} || '%'
		    </if>
		)
		where rno between #{startRno} and #{endRno}
		
	</select>
	
	<!-- === 부서목록 가져오기 === -->
	<select id="getDepartmentName" resultType="com.spring.finalProject.model.DepartmentVO_KGH">
		select departno, departmentname
		from tbl_department
		order by departno
	</select>
	
	<!-- === 직급 목록 가져오기 === -->
	<select id="getPosition" resultType="com.spring.finalProject.model.PositionVO_KGH">
		select positionno, positionname
		from tbl_position
		order by positionno
	</select>
	
	<!-- === 검색어 결과 조회하기(select) === -->
	<select id="employeeSearch" parameterType="HashMap" resultType="String">
		select name
		from
		(
		    select rownum AS rno, name
		    from tbl_employee
		    where retire = 0
		    and name like '%'|| #{searchEmployee} ||'%'
		) V
		where rno between 1 and 6
	</select>
	
	<!-- === 로그인 처리 메서드(select) === -->
	<select id="getLogin" parameterType="HashMap" resultType="com.spring.finalProject.model.EmployeeVO_KGH">
		select employeeid, fk_departNo, fk_positionNo, name, password, mobile, email,
			   to_char(hiredate, 'yyyy-mm-dd') AS hiredate, retiredate, retire, profilename, orgProfilename, fileSize, 
			   salary, dayoff, admin, postcode, address, detailAddress, extraAddress
		from tbl_employee
		where retire = 0
		and email = #{email}
		and password = #{password}
	</select>
	
	<!-- === 이메일 찾기 완료 메서드(select) === -->
	<select id="emailFindEnd" parameterType="HashMap" resultType="String">
		select email
		from tbl_employee
		where employeeid = #{employeeid} and name = #{name}
	</select>
	
	<!-- === 해당하는 이메일과 이름에 존재하는 사원 정보 찾기(select) === -->
	<select id="sendCodeEmail" parameterType="HashMap" resultType="String">
		select employeeid
		from tbl_employee
		where email = #{email} and name = #{name}
	</select>
	
	<!-- === 새비밀번호 업데이트 메서드(update) === -->
	<update id="newPasswordUpdate" parameterType="HashMap">
		update tbl_employee set password = #{newPassword}
		where email = #{email} and name = #{name}
	</update>
	
	<!-- === 이메일 중복 여부 검사하기(select) === -->
	<select id="emailDuplicateCheck" parameterType="String" resultType="String">
		select email
		from tbl_employee
		where email = #{email}
	</select>
	
	<!-- === 새로 생성될 사원번호 조회하기(select) === -->
	<select id="selectEmpId" parameterType="String" resultType="String">
		select to_char(sysdate, 'yy') || #{departmentno} || employeSeq.nextval AS empID
		from dual
	</select>
	
	<!-- === 직원 정보 등록하기(insert) === -->
	<select id="empRegister" parameterType="com.spring.finalProject.model.EmployeeVO_KGH" resultType="int">
		insert into tbl_employee(employeeId, fk_departNo, fk_positionNo, name, password ,mobile, email, hiredate, retiredate, retire, salary, dayoff, admin, address, detailAddress, extraAddress, postcode)
		values(#{employeeid}, #{fk_departNo}, #{fk_positionNo}, #{name}, #{password}, #{mobile}, #{email}, sysdate, default, 0, #{salary}, 0, 0, #{address}, #{detailAddress}, #{extraAddress}, #{postcode})
	</select>
	
	<!-- === 첨부파일과 함께 직원정보 등록하기(insert) === -->
	<select id="empRegisterWithProfile" parameterType="com.spring.finalProject.model.EmployeeVO_KGH" resultType="int">
		insert into tbl_employee(employeeId, fk_departNo, fk_positionNo, name, password ,mobile, email, hiredate, retiredate, retire, profilename, orgProfilename, fileSize, salary, dayoff, admin, address, detailAddress, extraAddress, postcode)
		values(#{employeeid}, #{fk_departNo}, #{fk_positionNo}, #{name}, #{password}, #{mobile}, #{email}, sysdate, default, 0, #{profilename}, #{orgProfilename}, #{fileSize}, #{salary}, 0, 0, #{address}, #{detailAddress}, #{extraAddress}, #{postcode})
	</select>
	
	<!-- === 기존 비밀번호와 같은지 체크 메서드(select) === -->
	<select id="passwordCheck" parameterType="HashMap" resultType="String">
		select password 
		from tbl_employee
		where employeeid = #{employeeid} and password = #{password}
	</select>
	
	<!-- === 해당하는 사원의 파일이 존재하는 경우 해당하는 파일명 가져오기(select) === -->
	<select id="getprofileName" parameterType="String" resultType="String">
		select profileName
		from tbl_employee
		where employeeid = #{employeeid}
	</select>
	
	<!-- === 해당하는 사원의 정보 update해주기 === -->
	<update id="mypageEnd" parameterType="com.spring.finalProject.model.EmployeeVO_KGH">
		update tbl_employee set name = #{name},
								password = #{password},
								mobile = #{mobile}, 
								profilename = #{profilename},
								orgProfilename = #{orgProfilename},
								fileSize = #{fileSize}, 
								address = #{address}, 
								detailAddress = #{detailAddress}, 
								extraAddress = #{extraAddress}, 
								postcode = #{postcode}
		where employeeid = #{employeeid}
	</update>
	
	<!-- === 파일이 없는 사원의 정보 update 해주기 === -->
	<update id="mypageEndNoFile" parameterType="com.spring.finalProject.model.EmployeeVO_KGH">
		update tbl_employee set name = #{name},
								password = #{password},
								mobile = #{mobile}, 
								profilename = null,
								orgProfilename = null,
								fileSize = null, 
								address = #{address}, 
								detailAddress = #{detailAddress}, 
								extraAddress = #{extraAddress}, 
								postcode = #{postcode}
		where employeeid = #{employeeid}
	</update>
	
	<!-- === 특정 회원에 대한 정보 가져오기(select) === -->
	<resultMap type="HashMap" id="empListEditMap">
		<result property="employeeid"		column="employeeid" 		javaType="String" />
		<result property="email"		 	column="email" 				javaType="String" />
		<result property="name"		 		column="name" 				javaType="String" />
		<result property="mobile"		 	column="mobile" 			javaType="String" />
		<result property="departno"			column="departno" 			javaType="String" />
		<result property="departmentname"	column="departmentname" 	javaType="String" />
		<result property="positionno"		column="positionno" 		javaType="String" />
		<result property="positionname"		column="positionname" 		javaType="String" />
		<result property="hiredate"			column="hiredate" 			javaType="String" />
		<result property="salary"			column="salary" 			javaType="String" />
		<result property="profilename"		column="profilename" 		javaType="String" />
	</resultMap>
	<select id="empListEdit" parameterType="String" resultMap="empListEditMap">
		select employeeid, email, name, mobile, departno, departmentname, 
		       positionno, positionname, hiredate, salary, profilename
		from 
		(
		    select employeeid, email, name, mobile, D.departno, d.departmentname, P.positionno, P.positionname, 
		           to_char(hiredate, 'yyyy-mm-dd') AS hiredate, salary, profilename
		    from tbl_employee E
		    JOIN tbl_department D
		    ON E.fk_departno = D.departno
		    JOIN tbl_position P
		    ON e.fk_positionno = p.positionno
		)
		where employeeid = #{employeeID}
	</select>
	
	<!-- === 기존에 있던 부서의 팀장 사원번호 가져오기(select) === -->
	<select id="getManagerId" parameterType="HashMap" resultType="String">
		select managerID
		from tbl_department
		where departNo = #{departno}
	</select>
	
	<!-- === 기존의 팀장에 대한 사원 테이블 update === -->
	<update id="updateEmployee" parameterType="String">
		update tbl_employee set admin = 0, fk_positionNo = 99
		where employeeid = #{managerId}
	</update>
	
	<!-- === 새로운 팀장에 대한 부서 테이블 update === -->
	<update id="updateDepartManager" parameterType="HashMap">
		update tbl_department set managerid = #{employeeid}
		where departno = #{departno}
	</update>
	
	<!-- 직원 정보 수정하기(update) -->
	<update id="empEdit">
		update tbl_employee set name = #{name},
		                        mobile = #{mobile},
		                        fk_departno = #{fk_departNo},
		                        fk_positionno = #{fk_positionNo},
		                        salary = #{salary},
		<if test="fk_positionNo == 2">
								admin = 1
		</if>
		<if test="fk_positionNo != 2">
								admin = 0
		</if>
		where employeeid = #{employeeid}
	</update>
	
	<!-- 부서별 직원 인원수 가져오기(select) -->
	<select id="getDepartempCnt" resultType="String">
		select count(*)
		from tbl_employee
		group by fk_departno
		order by fk_departno
	</select>
	
	<!-- 엑셀 파일 직원 목록 가져오기(select) -->
	<resultMap type="HashMap" id="excelEmployeeList">
		<result property="employeeid" 	  column="employeeid" 		javaType="String"/>
		<result property="departmentname" column="departmentname" 	javaType="String"/>
		<result property="positionname"   column="positionname" 	javaType="String"/>
		<result property="name" 		  column="name" 			javaType="String"/>
		<result property="mobile" 		  column="mobile" 			javaType="String"/>
		<result property="email" 		  column="email" 			javaType="String"/>
		<result property="salary" 		  column="salary" 			javaType="String"/>
		<result property="hiredate" 	  column="hiredate" 		javaType="String"/>
	</resultMap>
	<select id="excelEmpList" parameterType="HashMap" resultMap="excelEmployeeList">
		select employeeid, departmentname, positionname, 
       		   name, mobile, email, salary, hiredate
		from
		(
		    select row_number() over(order by fk_positionNo, fk_departno, employeeID) AS RNO,
		           employeeid, fk_departno, departmentname, 
		           fk_positionno, positionname, name, mobile, email, salary, hiredate
		           
		    from 
		    (
		        select employeeid, fk_departno, departmentname, fk_positionno, 
		               name, mobile, email, retire, salary, to_char(hiredate, 'yyyy-mm-dd') AS hiredate
		        from tbl_employee E
		        JOIN tbl_department D
		        ON E.fk_departno = D.departno
		    ) V
		    JOIN tbl_position P
		    ON V.fk_positionno = P.positionno
		    where V.retire = 0
		    <if test='department != ""'>
			    and departmentname = #{department}   
		    </if>
		    <if test='position != ""'>
			    and positionname = #{position}   
		    </if>
		    <if test='searchEmp != ""'>
			    and name like '%'||#{searchEmp}||'%'   
		    </if>
		)
	</select>
	
	<!-- === 직원수 가져오기 메서드(select) === -->
	<select id="getEmpCnt" resultType="int">
		select count(*)
		from tbl_employee
	</select>
	
	<!-- === 중복된 부서명 존재하는지 확인 메서드(select) === -->
	<select id="departDuplicate" parameterType="String" resultType="int">
		select count(*) 
		from tbl_department
		where departmentname = #{newDepart}
	</select>
	
	<!-- === 해당하는 사원의 번호 존재여부 확인하는 메서드(select) === -->
	<select id="isExistsEmpID" parameterType="String" resultType="int">
		select count(*) 
		from tbl_employee
		where employeeid = #{employeeid}
	</select>
	
	<!-- === 새로운 부서 추가하기(insert) === -->
	<select id="newDepartAddEnd" parameterType="HashMap" resultType="int">
		insert into tbl_department(departNo, departmentName, managerID)
		values(departSeq.nextval, #{newDepartname}, #{newDepartempID})
	</select>
	
	<!-- === 새로 추가한 부서번호 가져오기 === -->
	<select id="getdepartmentno" parameterType="HashMap" resultType="String">
		select departno
		from tbl_department
		where departmentname = #{newDepartname} and managerid = #{newDepartempID}
	</select>
	
	<!-- === 해당하는 사번의 직책 update하기 === -->
	<update id="updateManager" parameterType="HashMap">
		update tbl_employee set fk_departno = #{departno}, admin = 1, fk_positionno = 2
		where employeeid = #{newDepartempID}
	</update>
	
	<!-- === 부서 삭제 및 삭제 부서에 대한 사원정보 변경(update) === -->
	<update id="delDepartEmpUpdate" parameterType="String">
		update tbl_employee set fk_departno = 999, fk_positionno = 99, admin = 0
		where fk_departno = #{departno}
	</update>
	
	<!-- === 해당하는 부서에 대한 사원 정보 변경이 성공한 경우 해당 부서 삭제(delete) === -->
	<delete id="delDepart">
		delete tbl_department
		where departno = #{departno}
	</delete>
	
	<!-- === 부서명 수정하기 메서드(update) === -->
	<update id="departEditEnd" parameterType="HashMap">
		update tbl_department set departmentname = #{newDepartName}
		where departno = #{departno}
	</update>
	
	<!-- === 체크박스에 체크된 사원에 대한 부서변경(update) === -->
	<update id="changeDepartment" parameterType="HashMap">
		update tbl_employee set fk_departno = #{departno}
		where 1 = 1 
		<if test="checkEmpArr != null">
			and employeeid in 
			<foreach collection="checkEmpArr" index="i" open="(" separator="," close=")">
				'${checkEmpArr[i]}'
			</foreach>
		</if>
	</update>
	
	<!-- === 관리자수 가져오기 메서드(select) === -->
	<select id="getTotalAdminCount" resultType="int">
		select count(*)
		from tbl_employee
		where admin = 1 and retire = 0
	</select>
	
	<!-- === 관리자 List 가져오기(select) === -->
	<resultMap type="HashMap" id="adminListMap">
		<result property="employeeid"		column="employeeid" 		javaType="String" />
		<result property="fk_departno"		column="fk_departno" 		javaType="String" />
		<result property="departmentname"	column="departmentname" 	javaType="String" />
		<result property="fk_positionno"	column="fk_positionno" 		javaType="String" />
		<result property="positionname"		column="positionname" 		javaType="String" />
		<result property="name"		 		column="name" 				javaType="String" />
		<result property="mobile"		 	column="mobile" 			javaType="String" />
		<result property="email"		 	column="email" 				javaType="String" />
	</resultMap>
	<select id="getAdminList" parameterType="HashMap" resultMap="adminListMap">
		select employeeid, fk_departno, departmentname, 
		       fk_positionno, positionname, name, mobile, email
		from 
		(
		    select rownum AS rno, employeeid, fk_departno, departmentname, fk_positionno, 
		           name, mobile, email, retire, admin
		    from tbl_employee E
		    JOIN tbl_department D
		    ON E.fk_departno = D.departno
		    where admin = 1
		) V
		JOIN tbl_position P
		ON V.fk_positionno = P.positionno
		where V.retire = 0
		and rno between #{startRno} and #{endRno}
		order by fk_positionNo, fk_departno, employeeID asc
	</select>
	
	<!-- === 관리자 메뉴 검색어 결과 조회하기(select) === -->
	<select id="adminListSearch" parameterType="HashMap" resultType="com.spring.finalProject.model.EmployeeVO_KGH">
		select employeeid, name
		from
		(
		    select rownum AS rno, employeeid, name
		    from tbl_employee
		    where retire = 0
		    and admin = 0
		    and name like '%'|| #{searchEmployee} ||'%'
		) V
		where rno between 1 and 4
	</select>
	
	<!-- === 관리자 추가 메서드(update) === -->
	<update id="adminAddEnd" parameterType="String">
		update tbl_employee set admin = 1
		where employeeid = #{employeeid}
	</update>
	
	<!-- === 관리자 권한 삭제 메서드(update) === -->
	<update id="adminDelEnd" parameterType="String">
		update tbl_employee set admin = 0
		where employeeid = #{employeeid}
	</update>
	
	<!-- === 삭제하고자 하는 직원의 정보가 팀장일 경우 부서 테이블 managerid null처리 (update) === -->
	<update id="delManagerId" parameterType="HashMap">
		update tbl_department set managerid = NULL
		where departno = #{positionno}
	</update>
	
	<!-- === 삭제하고자 하는 직원의 정보 update(admin, retire, retiredate) === -->
	<update id="empDelEnd" parameterType="HashMap">
		update tbl_employee set retiredate = sysdate,
		                        retire = 1,
		                        admin = 0
		where employeeid = #{employeeid}
	</update>
	
	<!-- === 조직도 리스트 가져오기(select) === -->
	<resultMap type="HashMap" id="organizationList">
		<result property="employeeid"		column="employeeid" 		javaType="String" />
		<result property="fk_departno"		column="fk_departno" 		javaType="String" />
		<result property="departmentname"	column="departmentname" 	javaType="String" />
		<result property="fk_positionno"	column="fk_positionno" 		javaType="String" />
		<result property="positionname"		column="positionname" 		javaType="String" />
		<result property="name"		 		column="name" 				javaType="String" />
	</resultMap>
	<select id="getOrganization" resultMap="organizationList">
		select employeeid, fk_departno, departmentname, fk_positionno, positionname, name
		from 
		(
		    select employeeid, fk_departno, departmentname, fk_positionno, name,retire
		    from tbl_employee E
		    JOIN tbl_department D
		    ON E.fk_departno = D.departno
		    where admin = 1
		) V
		JOIN tbl_position P
		ON V.fk_positionno = P.positionno
		where V.retire = 0
		order by fk_positionNo, fk_departno, employeeID asc
	</select>
	
</mapper>